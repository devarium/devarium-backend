name: dev-deploy-java-app-to-ec2.yml

on:
  push:
    branches:
      - dev

env:
  DOCKER_IMAGE_TAG_NAME: dev-devarium-backend

jobs:
  build-app-and-docker-push:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'corretto'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew bootJar

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest
          no-cache: true

  deploy-to-ec2:
    needs: build-app-and-docker-push
    runs-on: ubuntu-20.04
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_EC2_HOST }}
          username: ${{ secrets.DEV_EC2_USERNAME }}
          key: ${{ secrets.DEV_EC2_KEY }}
          script: |
            sudo apt-get update
            sudo apt-get install -y docker.io
            sudo usermod -aG docker $USER
            newgrp docker
            
            EXITED_CONTAINERS=$(sudo docker ps -aq --filter "status=exited")
            if [ ! -z "$EXITED_CONTAINERS" ]; then
              sudo docker rm $EXITED_CONTAINERS || true
            fi
            
            CONTAINER_ID=$(sudo docker ps -aq --filter "publish=8080")
            if [ ! -z "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID || true
              sudo docker rm $CONTAINER_ID || true
            fi
            
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest

            sudo docker run -d -p 8080:8080 \
              -e SPRING_PROFILES_ACTIVE=api,api-dev,infrastructure,infrastructure-dev \
              -e DEV_DB_HOST=${{ secrets.DEV_DB_HOST }} \
              -e DEV_DB_PORT=${{ secrets.DEV_DB_PORT }} \
              -e DEV_DB_NAME=${{ secrets.DEV_DB_NAME }} \
              -e DEV_DB_USERNAME=${{ secrets.DEV_DB_USERNAME }} \
              -e DEV_DB_PASSWORD=${{ secrets.DEV_DB_PASSWORD }} \
              -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
              -e JWT_ACCESS_TOKEN_EXPIRATION=${{ secrets.JWT_ACCESS_TOKEN_EXPIRATION }} \
              -e JWT_REFRESH_TOKEN_EXPIRATION=${{ secrets.JWT_REFRESH_TOKEN_EXPIRATION }} \
              -e GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
              -e GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} \
              -e REDIS_HOST=${{ secrets.REDIS_HOST }} \
              -e REDIS_PORT=${{ secrets.REDIS_PORT }} \
              -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
              ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest